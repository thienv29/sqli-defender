<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒêƒÉng Nh·∫≠p An To√†n - B·∫£o V·ªá SQLi</title>
    <link rel="stylesheet" href="css/common.css">
    <link rel="stylesheet" href="css/safe_login.css">
</head>
<body>
    <?php
    include 'nav.php';
    echo getNavbar('safe_login.php');
    ?>

    <div class="container">
        <div class="header">
            <div class="title">
                üõ°Ô∏è <div class="safe-badge">AN TO√ÄN</div>
            </div>
            <div class="description">
                Demo ƒëƒÉng nh·∫≠p an to√†n d√πng PDO prepared statements - B·∫£o v·ªá kh·ªèi SQL injection
            </div>
        </div>

        <div class="safe-section">
            <h3 class="green">üõ°Ô∏è PH∆Ø∆†NG PH√ÅP AN TO√ÄN</h3>
            <p><strong>PDO Prepared Statements v·ªõi tham s·ªë r√†ng bu·ªôc</strong></p>
            <div class="security-code">
                ‚úÖ PDO Prepared Statements<br>
                ‚úÖ R√†ng bu·ªôc tham s·ªë (:u, :p)<br>
                ‚úÖ L·ªçc d·ªØ li·ªáu ƒë·∫ßu v√†o<br>
                ‚úÖ T√°ch bi·ªát metadata SQL
            </div>
        </div>

        <?php
        $result = null;
        $error = null;

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            try {
                $dsn = 'mysql:host=db;dbname=demo;charset=utf8mb4';
                $pdo = new PDO($dsn, 'demo', 'demopass', [
                    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
                ]);

                $u = $_POST['username'] ?? '';
                $p = $_POST['password'] ?? '';

                // ‚úÖ AN TO√ÄN: Prepared statement v·ªõi tham s·ªë r√†ng bu·ªôc
                $stmt = $pdo->prepare("SELECT * FROM users WHERE username = :u AND password = :p LIMIT 1");
                $stmt->execute([':u' => $u, ':p' => $p]);
                $row = $stmt->fetch();

                if ($row) {
                    $result = "Ch√†o m·ª´ng quay l·∫°i, " . htmlspecialchars($row['username']) . "! üéâ";
                } else {
                    $error = "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá";
                }

            } catch (Exception $e) {
                $error = "C√≥ l·ªói x·∫£y ra v·ªõi c∆° s·ªü d·ªØ li·ªáu";
            }
        }
        ?>

        <form method="post" class="login-form">
            <div class="form-group">
                <label for="username" class="form-label">üë§ T√™n ƒëƒÉng nh·∫≠p</label>
                <input type="text" id="username" name="username" class="form-input"
                       placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p..."
                       value="<?php echo htmlspecialchars($_POST['username'] ?? ''); ?>" required>
            </div>

            <div class="form-group">
                <label for="password" class="form-label">üîë M·∫≠t kh·∫©u</label>
                <input type="password" id="password" name="password" class="form-input"
                       placeholder="Nh·∫≠p m·∫≠t kh·∫©u..." required>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-success">
                    <span>üõ°Ô∏è</span>
                    <span>ƒêƒÉng Nh·∫≠p B·∫£o M·∫≠t</span>
                    <span>üîí</span>
                </button>

                <button type="button" onclick="showEducation()" class="btn btn-info">
                    <span>üéì</span>
                    <span>T√åM HI·ªÇU V·ªÄ AN TO√ÄN</span>
                </button>
            </div>
        </form>

        <?php if ($result): ?>
            <div class="result-box result-success">
                <?php echo $result; ?>
            </div>
        <?php elseif ($error): ?>
            <div class="result-box result-error">
                ‚ùå <?php echo htmlspecialchars($error); ?>
            </div>
        <?php endif; ?>

        <div class="payload-hint">
            <div class="payload-title">üí° Th·ª≠ c√°c payload kh√¥ng c√≤n nguy hi·ªÉm:</div>
            <div class="code-snippet"><code>' OR '1'='1 --</code> (V√¥ hi·ªáu qu·∫£ ·ªü ƒë√¢y)</div>
            <div class="code-snippet"><code>admin'; DROP TABLE users; --</code> (Kh√¥ng th·ª±c thi l·ªánh ƒë·ªôc)</div>
            <p style="margin-top: 10px; font-size: 0.9em;">
                V·ªõi prepared statements, payloads n√†y ch·ªâ l√† data, kh√¥ng ph·∫£i SQL code!
            </p>
        </div>

        <div class="protection-note">
            <div class="protection-title">üí° T·∫°i Sao An To√†n:</div>
            <p>Input ƒë∆∞·ª£c tham s·ªë h√≥a v√† x·ª≠ l√Ω ri√™ng bi·ªát. SQL engine bi·∫øt ƒë√¢y ch·ªâ l√† data, kh√¥ng th·ª±c thi nh∆∞ code.</p>
        </div>

        <!-- Education Modal -->
        <div id="educationModal" class="sql-modal">
            <div class="sql-modal-content">
                <div class="sql-modal-header">
                    <h3>üéì PDO PREPARED STATEMENTS - B·∫£o V·ªá SQL Injection</h3>
                    <button onclick="closeEducation()" class="close-modal">&times;</button>
                </div>
                <div class="sql-modal-body">
                    <div class="sql-education">
                        <h3 style="color: #28a745; margin-bottom: 20px;">üõ°Ô∏è C√ÅCH HO·∫†T ƒê·ªòNG - PDO PREPARED STATEMENTS</h3>
                        <p><strong>Prepared Statements</strong> t√°ch bi·ªát SQL code v√† data. Input lu√¥n ƒë∆∞·ª£c treated l√† data, kh√¥ng bao gi·ªù nh∆∞ SQL commands.</p>

                        <h4 style="color: #28a745;">Quy Tr√¨nh:</h4>
                        <ol>
                            <li><strong>Chu·∫©n B·ªã (Prepare):</strong> SQL query ƒë∆∞·ª£c compile v·ªõi placeholders (:u, :p)</li>
                            <li><strong>R√†ng Bu·ªôc (Binding):</strong> Input bind v√†o placeholders nh∆∞ data thu·∫ßn t√∫y</li>
                            <li><strong>Th·ª±c Thi (Execute):</strong> Engine thay th·∫ø placeholders b·∫±ng data an to√†n</li>
                        </ol>

                        <h4 style="color: #28a745;">V√≠ D·ª• An To√†n:</h4>
                        <p><code>SELECT * FROM users WHERE username = :u AND password = :p</code></p>
                        <p>Tham s·ªë :u = <code>admin' OR '1'='1</code> ‚Üí Ch·ªâ l√† chu·ªói k√Ω t·ª±, kh√¥ng ph√° v·ª° query!</p>

                        <h3 style="color: #dc3545; margin-top: 30px;">üõ†Ô∏è SO S√ÅNH V·ªöI PH∆Ø∆†NG PH√ÅP L·ªñ H·ªîNG</h3>
                        <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                            <tr>
                                <th style="border: 1px solid #ccc; padding: 8px;">Aspect</th>
                                <th style="border: 1px solid #ccc; padding: 8px;">L·ªó H·ªïng</th>
                                <th style="border: 1px solid #ccc; padding: 8px;">An To√†n</th>
                            </tr>
                            <tr>
                                <td style="border: 1px solid #ccc; padding: 8px;">Gh√©p String</td>
                                <td style="border: 1px solid #ccc; padding: 8px; color: red;">"$sql = '$u'"</td>
                                <td style="border: 1px solid #ccc; padding: 8px; color: green;">bindParam()</td>
                            </tr>
                            <tr>
                                <td style="border: 1px solid #ccc; padding: 8px;">SQL Injection</td>
                                <td style="border: 1px solid #ccc; padding: 8px; color: red;">C√≥ Th·ªÉ</td>
                                <td style="border: 1px solid #ccc; padding: 8px; color: green;">Kh√¥ng Th·ªÉ</td>
                            </tr>
                            <tr>
                                <td style="border: 1px solid #ccc; padding: 8px;">Performance</td>
                                <td style="border: 1px solid #ccc; padding: 8px;">Recompile m·ªói l·∫ßn</td>
                                <td style="border: 1px solid #ccc; padding: 8px;">Prepared m·ªôt l·∫ßn</td>
                            </tr>
                        </table>

                        <h3 style="color: #dc3545; margin-top: 30px;">‚ö†Ô∏è T√åNH HU·ªêNG TH·ª∞C T·∫æ ƒê√É X·∫¢Y RA (Do Kh√¥ng D√πng Prepared Statements)</h3>
                        <div class="real-case">
                            <strong>2011 - Sony Pictures Hack:</strong><br>
                            77 tri·ªáu t√†i kho·∫£n b·ªã ƒë√°nh c·∫Øp qua SQL injection. Hacker li√™n quan Tri·ªÅu Ti√™n, thi·ªát h·∫°i kinh t·∫ø h√†ng tri·ªáu USD.
                        </div>
                        <div class="real-case">
                            <strong>2014 - Heartland Payment Systems:</strong><br>
                            130 tri·ªáu th·∫ª t√≠n d·ª•ng b·ªã ƒë√°nh c·∫Øp do l·ªó h·ªïng SQL injection. C√¥ng ty ph·∫£i tr·∫£ c√°c kho·∫£n ph·∫°t l·ªõn v√† chi ph√≠ kh·∫Øc ph·ª•c.
                        </div>
                        <div class="real-case">
                            <strong>2017 - Equifax Breach:</strong><br>
                            147 tri·ªáu h·ªì s∆° c√° nh√¢n b·ªã l·ªô th√¥ng tin nh·∫°y c·∫£m (SSN, ng√†y sinh) qua SQL injection trong ·ª©ng d·ª•ng web c≈©.
                        </div>

                        <h3 style="color: #dc3545; margin-top: 30px;">üí∞ THI·ªÜT H·∫†I T·ª™ SQL INJECTION</h3>
                        <ul>
                            <li><strong>Leak th√¥ng tin nh·∫°y c·∫£m:</strong> M·∫≠t kh·∫©u, SSN, th·∫ª t√≠n d·ª•ng, email</li>
                            <li><strong>Thi·ªát h·∫°i t√†i ch√≠nh:</strong> Chi ph√≠ kh·∫Øc ph·ª•c, m·∫•t doanh thu, ph·∫°t vi ph·∫°m lu·∫≠t</li>
                            <li><strong>U·ªën m·∫•t uy t√≠n:</strong> M·∫•t l√≤ng tin c·ªßa kh√°ch h√†ng</li>
                        </ul>

                        <h3 style="color: #28a745; margin-top: 30px;">üõ°Ô∏è GI·∫¢I PH√ÅP TH√ÄNH C√îNG</h3>
                        <ul>
                            <li><strong>‚úÖ Prepared Statements:</strong> PDO/MySQLi v·ªõi bind parameters</li>
                            <li><strong>‚úÖ Input Validation:</strong> Whitelist input, validate types</li>
                            <li><strong>‚úÖ Escaping:</strong> mysqli_real_escape_string() (nh∆∞ng kh√¥ng thay th·∫ø prepared statements)</li>
                            <li><strong>‚úÖ Least Privilege:</strong> Database user ch·ªâ c√≥ quy·ªÅn c·∫ßn thi·∫øt</li>
                            <li><strong>‚úÖ WAF:</strong> Web Application Firewall ph√°t hi·ªán patterns</li>
                            <li><strong>‚úÖ ORM:</strong> Frameworks nh∆∞ Laravel, ASP.NET Entity Framework</li>
                        </ul>

                        <p><strong>Khuy·∫øn Ngh·ªã:</strong> Lu√¥n s·ª≠ d·ª•ng prepared statements cho m·ªçi database operations. ƒê√¢y l√† best practice kh√¥ng th·ªÉ thi·∫øu!</p>
                    </div>
                </div>
            </div>
        </div>

        <script>
        function showEducation() {
            document.getElementById('educationModal').style.display = 'block';
        }

        function closeEducation() {
            document.getElementById('educationModal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const eduModal = document.getElementById('educationModal');
            if (event.target == eduModal) {
                eduModal.style.display = 'none';
            }
        }
        </script>

    </div>
</body>
</html>
