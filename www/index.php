<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demo SQL Injection - Ph√≤ng Th·ªß An Ninh</title>
    <link rel="stylesheet" href="css/common.css">
    <link rel="stylesheet" href="css/index.css">
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">üîí SQLi Defender</div>
            <div class="subtitle">H·ªçc SQL Injection Qua Th·ª±c H√†nh An To√†n</div>
        </header>

        <div class="warning">
            <strong>‚ö†Ô∏è C·∫¢NH B√ÅO AN NINH</strong><br>
            C√°c demo n√†y ch·ªâ d√†nh cho m·ª•c ƒë√≠ch gi√°o d·ª•c.
            Ch·∫°y trong m√¥i tr∆∞·ªùng c√¥ l·∫≠p nh∆∞ container Docker.
            KH√îNG th·ª≠ tr√™n h·ªá th·ªëng production ho·∫∑c shared hosting.
        </div>

        <div class="demo-content">
            <div class="left-column">
                <div class="section">
                    <h2>üöÄ C√°c Demo SQL Injection</h2>
                    <div class="demo-grid">
                        <div class="demo-card vulnerable">
                            <div class="demo-icon">üîì</div>
                            <div class="demo-title">Login Bypass</div>
                            <div class="demo-desc">Authentication bypass qua string concatenation</div>
                            <a href="vuln_login.php" class="demo-link">Th·ª≠ Ngay</a>
                        </div>

                        <div class="demo-card safe">
                            <div class="demo-icon">üõ°Ô∏è</div>
                            <div class="demo-title">Login B·∫£o M·∫≠t</div>
                            <div class="demo-desc">PDO prepared statements - an to√†n</div>
                            <a href="safe_login.php" class="demo-link">Th·ª≠ Ngay</a>
                        </div>

                        <div class="demo-card vulnerable">
                            <div class="demo-icon">üîç</div>
                            <div class="demo-title">UNION Attack</div>
                            <div class="demo-desc">Data leakage qua UNION-based injection</div>
                            <a href="search.php" class="demo-link">Th·ª≠ Ngay</a>
                        </div>

                        <div class="demo-card vulnerable">
                            <div class="demo-icon">üëÅÔ∏è</div>
                            <div class="demo-title">Blind SQLi</div>
                            <div class="demo-desc">Boolean-based inference attacks</div>
                            <a href="blind.php" class="demo-link">Th·ª≠ Ngay</a>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h2>üìö K·ªãch B·∫£n T·∫•n C√¥ng Th·ª±c T·∫ø</h2>
                    <div class="scenario-grid">
                        <div class="scenario-card">
                            <div class="scenario-title">1. Bypass Authentication</div>
                            <p>S·ª≠ d·ª•ng <code>vuln_login.php</code>:</p>
                            <div class="code-block">
    Username: <code>' OR '1'='1 --</code><br>
    Password: <code>b·∫•t k·ª≥</code>
                            </div>
                        </div>

                        <div class="scenario-card">
                            <div class="scenario-title">2. Data Exfiltration</div>
                            <p>S·ª≠ d·ª•ng <code>search.php</code>:</p>
                            <div class="code-block">
    <code>' UNION SELECT username, password FROM users --</code>
                            </div>
                        </div>

                        <div class="scenario-card">
                            <div class="scenario-title">3. Blind Data Extraction</div>
                            <p>S·ª≠ d·ª•ng <code>blind.php</code>:</p>
                            <div class="code-block">
    <code>1 AND substring(password,1,1)='a' FROM users WHERE id=1</code>
                            </div>
                        </div>

                        <div class="scenario-card">
                            <div class="scenario-title">4. Safe Comparison</div>
                            <p>Test payload tr√™n <code>safe_login.php</code> - s·∫Ω th·∫•t b·∫°i do prepared statements.</p>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h2>üõ°Ô∏è Ph√≤ng Th·ªß ƒêa L·ªõp</h2>
                    <div class="defense-grid">
                        <div class="defense-item">
                            <strong>üèóÔ∏è Application Layer</strong>
                            <p>Prepared statements, input validation, parameterized queries</p>
                        </div>

                        <div class="defense-item">
                            <strong>üóÑÔ∏è Database Layer</strong>
                            <p>Least privilege accounts, stored procedures, no dynamic SQL</p>
                        </div>

                        <div class="defense-item">
                            <strong>üåê Network Layer</strong>
                            <p>WAF, input sanitization, rate limiting</p>
                        </div>

                        <div class="defense-item">
                            <strong>üìä Operational Layer</strong>
                            <p>Logging, monitoring, security audits, patch management</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="right-column">
                <h3 style="color: #dc3545; margin-bottom: 20px;">üîç SQL INJECTION L√Ä G√å?</h3>
                <p><strong>SQL Injection (SQLi)</strong> l√† l·ªó h·ªïng b·∫£o m·∫≠t web ph·ªï bi·∫øn nh·∫•t, x·∫øp h·∫°ng #1 trong OWASP Top 10.</p>

                <p>L·ªó h·ªïng x·∫£y ra khi ·ª©ng d·ª•ng web kh√¥ng validate input t·ª´ ng∆∞·ªùi d√πng tr∆∞·ªõc khi gh√©p v√†o SQL query. K·∫ª t·∫•n c√¥ng c√≥ th·ªÉ injection malicious SQL code, thay ƒë·ªïi logic query ho·∫∑c extract data nh·∫°y c·∫£m.</p>

                <p>Nguy√™n nh√¢n ch√≠nh: Gh√©p string tr·ª±c ti·∫øp v√†o SQL thay v√¨ s·ª≠ d·ª•ng prepared statements.</p>

                <h3 style="color: #dc3545; margin-top: 30px;">üõ†Ô∏è C√ÅC LO·∫†I SQL INJECTION</h3>
                <ul>
                    <li><strong>Classical/In-band:</strong> K·∫øt qu·∫£ tr·ª±c ti·∫øp trong response (UNION, error-based)</li>
                    <li><strong>Blind/Inferential:</strong> Ph·∫£i suy ƒëo√°n t·ª´ behavior (boolean-based, time-based)</li>
                    <li><strong>Out-of-band:</strong> Data sent qua different channel (DNS, HTTP requests)</li>
                </ul>

                <h3 style="color: #dc3545; margin-top: 30px;">‚ö†Ô∏è T√åNH HU·ªêNG TH·ª∞C T·∫æ N·ªîI TI·∫æNG</h3>
                <div class="real-case">
                    <strong>2008 - Heartland Payment Systems:</strong><br>
                    Breach l·ªõn nh·∫•t l·ªãch s·ª≠, 130 tri·ªáu th·∫ª t√≠n d·ª•ng compromised qua SQLi. Chi ph√≠ kh·∫Øc ph·ª•c > $300M.
                </div>
                <div class="real-case">
                    <strong>2011 - Sony Pictures:</strong><br>
                    77 tri·ªáu accounts b·ªã steal. Hacker North Korean li√™n quan, breach d·∫´n ƒë·∫øn class-action lawsuits.
                </div>
                <div class="real-case">
                    <strong>2014 - Yahoo:</strong><br>
                    500 tri·ªáu accounts compromised qua SQLi trong Yahoo Voices. Breach che gi·∫•u ƒë·∫øn 2016.
                </div>
                <div class="real-case">
                    <strong>2017 - Equifax:</strong><br>
                    147 tri·ªáu personal records exposed. SQLi trong application ch∆∞a patch Apache Struts.
                </div>
                <div class="real-case">
                    <strong>Continuous WordPress Attacks:</strong><br>
                    H√†ng tri·ªáu sites compromised h√†ng nƒÉm qua vulnerable plugins s·ª≠ d·ª•ng dynamic SQL.
                </div>

                <h3 style="color: #dc3545; margin-top: 30px;">üí∞ T√ÅC ƒê·ªòNG V√Ä THI·ªÜT H·∫†I</h3>
                <ul>
                    <li><strong>Data Breach:</strong> Leaked sensitive information (PII, financial data, credentials)</li>
                    <li><strong>Financial Loss:</strong> Recovery costs, fines, legal fees, lost revenue</li>
                    <li><strong>Reputational Damage:</strong> Loss of customer trust, brand damage</li>
                    <li><strong>Regulatory Fines:</strong> GDPR ($20M), CCPA, PCI DSS violations</li>
                    <li><strong>Further Attacks:</strong> Initial SQLi d·∫´n ƒë·∫øn ransomware, lateral movement</li>
                </ul>

                <h3 style="color: #28a745; margin-top: 30px;">üõ°Ô∏è PH√íNG CH·ªêNG HI·ªÜU QU·∫¢</h3>
                <ul>
                    <li><strong>Primary Defense:</strong> Use prepared statements and parameterized queries ONLY</li>
                    <li><strong>Input Validation:</strong> Whitelist input, type checking, length limits</li>
                    <li><strong>ORM Frameworks:</strong> Frameworks prevent injection automatically</li>
                    <li><strong>Web Application Firewall:</strong> Block malicious patterns at network level</li>
                    <li><strong>Least Privilege:</strong> Database users v·ªõi minimum required permissions</li>
                    <li><strong>Error Handling:</strong> Kh√¥ng expose SQL errors to users</li>
                    <li><strong>Regular Security Audits:</strong> Automated scanning, penetration testing</li>
                </ul>

                <h4 style="color: #28a745;">Prepared Statements - Best Practice:</h4>
                <p>S·ª≠ d·ª•ng PDO ho·∫∑c mysqli prepared statements thay v√¨ string concatenation. Data ƒë∆∞·ª£c bind ri√™ng bi·ªát, SQL engine bi·∫øt r√µ boundary gi·ªØa code v√† data.</p>

                <p><strong>K·∫øt lu·∫≠n:</strong> SQL injection d·ªÖ ph√≤ng ng·ª´a nh∆∞ng h·∫≠u qu·∫£ th·∫£m h·∫°i. 90% vulnerabilities c√≥ th·ªÉ fix b·ªüi prepared statements ƒë√∫ng c√°ch!</p>

                <h3 style="color: #17a2b8; margin-top: 30px;">üîß C√îNG C·ª§ KI·ªÇM TRA</h3>
                <ul>
                    <li><strong>sqlmap:</strong> Automated SQL injection tool</li>
                    <li><strong>OWASP ZAP:</strong> Web application security scanner</li>
                    <li><strong>Burp Suite:</strong> Manual testing and scanning</li>
                    <li><strong>DVWA:</strong> Damn Vulnerable Web Application for practice</li>
                    <li><strong>PortSwigger Labs:</strong> Free SQL injection training</li>
                </ul>
            </div>
        </div>

        <div class="footer">
            <p style="opacity: 0.8;">
                Ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è b·∫±ng PHP, MySQL & Docker ‚Ä¢ Gi√°o d·ª•c B·∫£o m·∫≠t Th√¥ng tin
            </p>
        </div>
    </div>
</body>
</html>
