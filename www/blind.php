<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demo SQL Injection Boolean √ô</title>
    <link rel="stylesheet" href="css/common.css">
    <link rel="stylesheet" href="css/blind.css">
</head>
<body>
    <?php
    include 'nav.php';
    echo getNavbar('blind.php');
    ?>

    <div class="container">
        <div class="header">
            <div class="title">
                üëÅÔ∏è <div class="vulnerable-badge">BLIND SQLi</div>
            </div>
            <div class="description">
                Demo t·∫•n c√¥ng SQL injection boolean-based m√≤ m·∫´m - Extract data th√¥ng qua TRUE/FALSE logic
            </div>
        </div>

        <div class="vulnerable-section">
            <h3 class="red">üö® PH∆Ø∆†NG PH√ÅP L·ªñ H·ªîNG</h3>
            <p><strong>Gh√©p chu·ªói tr·ª±c ti·∫øp trong WHERE clause</strong></p>
            <p><code>$sql = "SELECT id FROM users WHERE id = $id AND role = 'admin'";</code></p>
            <p>Kh√¥ng y√™u c·∫ßu hi·ªÉn th·ªã data, ch·ªâ c·∫ßn TRUE/FALSE response.</p>
        </div>
<!-- 
        <div class="user-info">
            <div class="user-info-title">üë• Ng∆∞·ªùi d√πng test trong c∆° s·ªü d·ªØ li·ªáu:</div>
            <div class="user-list">
                <div class="user-item">
                    <div class="user-id">ID: 1</div>
                    <div class="user-name">Alice</div>
                    <div class="user-role">Vai tr√≤: user</div>
                </div>
                <div class="user-item">
                    <div class="user-id">ID: 2</div>
                    <div class="user-name">Bob</div>
                    <div class="user-role">Vai tr√≤: admin</div>
                </div>
            </div>
        </div> -->

        <div class="check-form">
            <form method="get">
                <div class="form-group">
                    <label for="id" class="form-label">Ki·ªÉm tra ID ng∆∞·ªùi d√πng:</label>
                    <input type="text" id="id" name="id" class="form-input"
                           placeholder="Nh·∫≠p ID ho·∫∑c ch√®n SQL..."
                           value="<?php echo isset($_GET['id']) ? htmlspecialchars($_GET['id']) : ''; ?>">

                <div class="form-actions">
                    <button type="submit" name="action" value="check" class="btn btn-primary">
                        <span>üëÅÔ∏è</span>
                        <span>Ki·ªÉm Tra Blind</span>
                        <span>üîç</span>
                    </button>

                    <button type="button" onclick="showSQL()" class="btn btn-info">
                        <span>üëÅÔ∏è</span>
                        <span>XEM SQL QUERY</span>
                    </button>

                    <button type="button" onclick="showEducation()" class="btn btn-warning">
                        <span>üéì</span>
                        <span>T√åM HI·ªÇU V·ªÄ BLIND</span>
                    </button>
                </div>
                </div>
            </form>
        </div>

        <div class="result-section">
            <?php
            if (isset($_GET['id'])) {
                $id = $_GET['id'];
                $conn = new mysqli('db', 'demo', 'demopass', 'demo');

                if ($conn->connect_error) {
                    echo '<div class="result-not-admin"><div class="result-icon">‚ùå</div><div class="result-title">L·ªói C∆° S·ªü D·ªØ Li·ªáu</div><div class="result-description">K·∫øt n·ªëi th·∫•t b·∫°i</div></div>';
                } else {
                    // ‚ö†Ô∏è L·ªñ H·ªîNG: Gh√©p chu·ªói tr·ª±c ti·∫øp trong WHERE
                    $sql = "SELECT id FROM users WHERE id = $id AND role = 'admin'";
                    $res = $conn->query($sql);

                    if ($res && $res->num_rows > 0) {
                        echo '<div class="result-admin">';
                        echo '<div class="result-icon">üëë</div>';
                        echo '<div class="result-title">User ID ' . htmlspecialchars($id) . ' l√† ADMIN!</div>';
                        echo '<div class="result-description">ƒêi·ªÅu ki·ªán ƒë∆∞·ª£c ƒë√°nh gi√° l√† TRUE</div>';
                        echo '</div>';
                    } else {
                        echo '<div class="result-not-admin">';
                        echo '<div class="result-icon">üë§</div>';
                        echo '<div class="result-title">User ID ' . htmlspecialchars($id) . ' KH√îNG ph·∫£i admin</div>';
                        echo '<div class="result-description">ƒêi·ªÅu ki·ªán ƒë∆∞·ª£c ƒë√°nh gi√° l√† FALSE</div>';
                        echo '</div>';
                    }
                    $conn->close();
                }
            }
            ?>
        </div>

        <div class="payloads-section">
            <div class="payloads-title">üí° Payload Boolean Blind SQLi:</div>
            <div class="payloads-grid">
                <div class="payload-item">
                    <div class="payload-label">üü¢ Truy v·∫•n b√¨nh th∆∞·ªùng:</div>
                    <div class="payload-code">2</div>
                    <div class="payload-expected">Bob l√† admin ‚Üí TRUE</div>
                </div>

                <div class="payload-item">
                    <div class="payload-label">üî¥ Lu·∫≠n ƒë·ªÅ ƒë√∫ng vƒ©nh vi·ªÖn:</div>
                    <div class="payload-code">2 OR 1=1</div>
                    <div class="payload-expected">Lu√¥n hi·ªán admin</div>
                </div>

                <div class="payload-item">
                    <div class="payload-label">‚ö™ M√¢u thu·∫´n (Lu√¥n FALSE):</div>
                    <div class="payload-code">2 AND 1=2</div>
                    <div class="payload-expected">Kh√¥ng bao gi·ªù hi·ªán admin</div>
                </div>

                <div class="payload-item">
                    <div class="payload-label">üîç Extract DB version:</div>
                    <div class="payload-code">2 AND substring((SELECT @@version),1,1)='8'</div>
                    <div class="payload-expected">TRUE n·∫øu MySQL 8.x</div>
                </div>

                <div class="payload-item">
                    <div class="payload-label">üìä Extract m·∫≠t kh·∫©u:</div>
                    <div class="payload-code">2 AND substring((SELECT password FROM users WHERE id=1),1,1)='a'</div>
                    <div class="payload-expected">TRUE n·∫øu m·∫≠t kh·∫©u Alice b·∫Øt ƒë·∫ßu b·∫±ng 'a'</div>
                </div>

                <div class="payload-item">
                    <div class="payload-label">‚è∞ Time-based (n·∫øu boolean kh√¥ng ho·∫°t ƒë·ªông):</div>
                    <div class="payload-code">2 AND IF(substring(database(),1,1)='t', SLEEP(5), 0)=0</div>
                    <div class="payload-expected">Response ch·∫≠m 5s n·∫øu database b·∫Øt ƒë·∫ßu b·∫±ng 't'</div>
                </div>
            </div>
        </div>

        <!-- SQL Display Modal -->
        <div id="sqlModal" class="sql-modal">
            <div class="sql-modal-content">
                <div class="sql-modal-header">
                    <h3>üëÅÔ∏è SQL Query ƒê∆∞·ª£c Th·ª±c Thi</h3>
                    <button onclick="closeSQL()" class="close-modal">&times;</button>
                </div>
                <div class="sql-modal-body">
                    <div class="sql-warning">
                        ‚ö†Ô∏è C·∫¢NH B√ÅO: ƒê√¢y l√† SQL query nguy hi·ªÉm! Input ch·ª©a trong WHERE condition.
                    </div>
                    <div class="sql-display">
                        <div class="sql-label">Query s·∫Ω th·ª±c thi:</div>
                        <div class="sql-code-display" id="sqlDisplay"></div>
                    </div>
                    <div class="sql-explanation">
                        <p><strong>C√°ch ho·∫°t ƒë·ªông:</strong></p>
                        <p>Input nh·ªìi v√†o <strong>WHERE id = ...</strong> query.</p>
                        <p>Blind attack d·ª±a v√†o TRUE/FALSE ƒë·ªÉ extract to√†n b·ªô data!</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Education Modal -->
        <div id="educationModal" class="sql-modal">
            <div class="sql-modal-content">
                <div class="sql-modal-header">
                    <h3>üéì BLIND SQL INJECTION - Chi Ti·∫øt Gi·∫£i Th√≠ch</h3>
                    <button onclick="closeEducation()" class="close-modal">&times;</button>
                </div>
                <div class="sql-modal-body">
                    <div class="sql-education">
                        <h3 style="color: #dc3545; margin-bottom: 20px;">üëÅÔ∏è C√ÅCH HO·∫†T ƒê·ªòNG - BLIND SQL INJECTION</h3>
                        <p><strong>Blind SQL Injection</strong> l√† d·∫°ng t·∫•n c√¥ng m√† attacker kh√¥ng th·ªÉ th·∫•y k·∫øt qu·∫£ query tr·ª±c ti·∫øp, nh∆∞ng c√≥ th·ªÉ suy ƒëo√°n th√¥ng tin d·ª±a v√†o h√†nh vi kh√°c nhau c·ªßa application.</p>

                        <h4 style="color: #dc3545;">Nguy√™n L√Ω:</h4>
                        <ul>
                            <li><strong>Boolean-based:</strong> Application tr·∫£ v·ªÅ hai response kh√°c nhau (TRUE/FALSE)</li>
                            <li><strong>Time-based:</strong> Application ch·∫≠m tr·ªÖ response d·ª±a tr√™n ƒëi·ªÅu ki·ªán</li>
                            <li><strong>Error-based:</strong> Trigger SQL errors ƒë·ªÉ l·ªô th√¥ng tin</li>
                        </ul>

                        <p><strong>V√≠ d·ª• Boolean:</strong> Input <code>2 AND substring((SELECT password FROM users WHERE id=1),1,1)='a'</code></p>
                        <p>N·∫øu TRUE ‚Üí Password b·∫Øt ƒë·∫ßu b·∫±ng 'a'. N·∫øu FALSE ‚Üí kh√¥ng ph·∫£i 'a'.</p>

                        <h3 style="color: #dc3545; margin-top: 30px;">üõ†Ô∏è LO·∫†I BLIND SQL INJECTION</h3>
                        <ul>
                            <li><strong>Content-based Boolean:</strong> Hai trang kh√°c nhau cho TRUE/FALSE (nh∆∞ v√≠ d·ª• n√†y)</li>
                            <li><strong>HTTP Status Boolean:</strong> 200 OK cho TRUE, 500 Error cho FALSE</li>
                            <li><strong>Time-based Blind:</strong> SLEEP(5) n·∫øu ƒëi·ªÅu ki·ªán ƒë√∫ng ‚Üí response ch·∫≠m</li>
                            <li><strong>Out-of-band:</strong> Trigger DNS/external requests ƒë·ªÉ extract data</li>
                            <li><strong>Error-based Blind:</strong> Trigger controlled SQL errors l·ªô data bits-by-bits</li>
                        </ul>

                        <h4 style="color: #dc3545;">Binary Search Algorithm trong Blind SQLi:</h4>
                        <ol>
                            <li>Test length c·ªßa string: <code>AND LENGTH(password)>10</code></li>
                            <li>Binary search t·ª´ng character (ASCII 0-255)</li>
                            <li>S·ª≠ d·ª•ng SUBSTRING() ho·∫∑c MID() ƒë·ªÉ extract t·ª´ng v·ªã tr√≠</li>
                            <li>Automate v·ªõi sqlmap ho·∫∑c custom scripts</li>
                        </ol>

                        <h3 style="color: #dc3545; margin-top: 30px;">‚ö†Ô∏è T√åNH HU·ªêNG TH·ª∞C T·∫æ ƒê√É X·∫¢Y RA</h3>
                        <div class="real-case">
                            <strong>2010 - MySQL.com Compromise:</strong><br>
                            Attacker d√πng blind SQLi ƒë·ªÉ extract database credentials, compromise customer's servers hosting millions of websites.
                        </div>
                        <div class="real-case">
                            <strong>2014 - Yahoo Voices Hack:</strong><br>
                            450,000 user credentials stolen qua blind SQL injection. Yahoo's infrastructure vulnerabilities ch·∫ø gi·ªÖu security practices.
                        </div>
                        <div class="real-case">
                            <strong>2017 - British Airways Breach:</strong><br>
                            400,000 payment cards compromised. Attackers used blind SQLi combined with card skimming malware.
                        </div>
                        <div class="real-case">
                            <strong>2019 - Capital One Cloud Breach:</strong><br>
                            100 million customer records exposed. Hacker exploited server-side request forgery combined with SQLi to access S3 buckets.
                        </div>
                        <div class="real-case">
                            <strong>Hacker Toolkits:</strong><br>
                            Blind SQLi widely used in automated tools nh∆∞ sqlmap, allowing attackers extract data from "secure" applications that don't leak data directly.
                        </div>

                        <h3 style="color: #dc3545; margin-top: 30px;">üí∞ THI·ªÜT H·∫†I T·ª™ BLIND ATTACKS</h3>
                        <ul>
                            <li><strong>Stealthy Extraction:</strong> Kh√¥ng ƒë·ªÉ l·∫°i logs r√µ r√†ng, kh√≥ ph√°t hi·ªán</li>
                            <li><strong>Complete Data Compromise:</strong> Extract ƒë∆∞·ª£c t·∫•t c·∫£ data d√π kh√¥ng hi·ªÉn th·ªã</li>
                            <li><strong>Infrastructure Pivot:</strong> T·ª´ web app compromised, move laterally into internal systems</li>
                            <li><strong>Long-term Access:</strong> Install webshells ho·∫∑c backdoors qua file write primitives</li>
                            <li><strong>Zero-day Vulnerabilities:</strong> Bypass traditional defenses v√¨ kh√¥ng match signatures</li>
                        </ul>

                        <h3 style="color: #28a745; margin-top: 30px;">üõ°Ô∏è PH√íNG CH·ªêNG BLIND SQL INJECTION</h3>
                        <ul>
                            <li><strong>Prepared Statements:</strong> T√°ch bi·ªát SQL code v√† data ho√†n to√†n</li>
                            <li><strong>Input Type Validation:</strong> Force integer types, reject non-numeric input</li>
                            <li><strong>Parameterized Stored Procedures:</strong> ƒê·ªãnh nghƒ©a query tr∆∞·ªõc, r√†ng bu·ªôc parameters</li>
                            <li><strong>Web Application Firewall:</strong> Rules detect unusual SQL patterns, timing attacks</li>
                            <li><strong>Rate Limiting:</strong> Block brute-force enumeration attacks</li>
                            <li><strong>Logging & Monitoring:</strong> Detect suspicious query patterns, slow responses</li>
                            <li><strong>Database Hardening:</strong> Disable error messages, limit user privileges</li>
                            <li><strong>Security Headers:</strong> CSP, HSTS prevent content injection attacks</li>
                        </ul>

                        <p><strong>K·∫øt Lu·∫≠n:</strong> Blind SQLi nguy hi·ªÉm v√¨ kh√≥ ph√°t hi·ªán. Ch√∫ng bypass traditional filters v√¨ kh√¥ng contain "OR 1=1" signatures. Ch·ªâ prepared statements m·ªõi th·ª±c s·ª± an to√†n!</p>
                    </div>
                </div>
            </div>
        </div>

        <script>
        function showSQL() {
            const userId = document.getElementById('id').value || '[id_tr·ªëng]';
            const sql = `SELECT id FROM users WHERE id = ${userId} AND role = 'admin'`;

            document.getElementById('sqlDisplay').textContent = sql;
            document.getElementById('sqlModal').style.display = 'block';
        }

        function closeSQL() {
            document.getElementById('sqlModal').style.display = 'none';
        }

        function showEducation() {
            document.getElementById('educationModal').style.display = 'block';
        }

        function closeEducation() {
            document.getElementById('educationModal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const sqlModal = document.getElementById('sqlModal');
            const eduModal = document.getElementById('educationModal');
            if (event.target == sqlModal) {
                sqlModal.style.display = 'none';
            } else if (event.target == eduModal) {
                eduModal.style.display = 'none';
            }
        }
        </script>

    </div>
</body>
</html>
